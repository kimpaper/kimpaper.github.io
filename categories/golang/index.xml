<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>golang on 기록 저장소</title>
    <link>https://kimpaper.github.io/categories/golang/</link>
    <description>Recent content in golang on 기록 저장소</description>
    <image>
      <url>https://kimpaper.github.io/papermod-cover.png</url>
      <link>https://kimpaper.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 28 Mar 2022 16:53:00 +0000</lastBuildDate><atom:link href="https://kimpaper.github.io/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>golang profiler 사용</title>
      <link>https://kimpaper.github.io/posts/golang/2022-03-28-golang_profiler/</link>
      <pubDate>Mon, 28 Mar 2022 16:53:00 +0000</pubDate>
      
      <guid>https://kimpaper.github.io/posts/golang/2022-03-28-golang_profiler/</guid>
      <description>http prof 를 이용해 프로파일 한다 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import ( &amp;#34;net/http&amp;#34; _ &amp;#34;net/http/pprof&amp;#34; ) func main() { go func() { log.Println(http.ListenAndServe(&amp;#34;0.0.0.0:6060&amp;#34;, nil)) }() ... do somthing ... } cpu profile (30초동안 데이터를 모은다) 1 go tool pprof http://xxxx:6060/debug/pprof/profile heap memory (현재 메모리 정보를 반환한다) 1 go tool pprof http://xxxx:6060/debug/pprof/heap heap 을 실행하면 아래와 같이 command line (pprof)가 나오는데 프로파일 명령을 넣으면 된다.</description>
    </item>
    
  </channel>
</rss>
